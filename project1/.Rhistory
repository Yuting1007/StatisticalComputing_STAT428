v = v^3
u = runif(1000)
if(u < 1 - 0.0331 * (x^4)){
return(d*v)
}
if(log(u) < 0.5* (x^2) + d * (1-v+log(v))){
return (d*v)
}
}
}
hist(randga(2))
hist(rgamma(1, shape = 2))
randga = function(a){
d = a -1/3
c = 1/sqrt(3*d)
while(TRUE){
x = rnorm(1000)
v = 1 + x*c
while(v <= 0){
x = rnorm(1000)
v = 1 + c*x
}
v = v^3
u = runif(1000)
if(u < 1 - 0.0331 * (x^4)){
return(d*v)
}
if(log(u) < 0.5* (x^2) + d * (1-v+log(v))){
return (d*v)
}
}
}
hist(randga(2))
hist(rgamma(1000, shape = 2))
s = runif(1000)
if(s < 0.5){
s = s
} else {
s = -1*s
}
x = rexp(1000)
y = rcauchy(1000)
z = sqrt((2*x)/(1+y^2))
hist(s*z)
s = runif(1000)
if(s < 0.5){
s = s
} else {
s = -1*s
}
x = rexp(1000)
y = rcauchy(1000)
z = sqrt((2*x)/(1+y^2))
hist(s*z, y*z)
s = runif(1000)
if(s < 0.5){
s = s
} else {
s = -1*s
}
x = rexp(1000)
y = rcauchy(1000)
z = sqrt((2*x)/(1+y^2))
hist(s*z)
hist(y*z)
s = runif(1000)
if(s < 0.5){
s = s
} else {
s = -1*s
}
x = rexp(1000)
y = rcauchy(1000)
z = sqrt((2*x)/(1+y^2))
hist(s*z)
hist(y*z)
s = runif(1000)
if(s < 0.5){
s = s
} else {
s = -1*s
}
x = rexp(1000)
y = rcauchy(1000)
z = sqrt((2*x)/(1+y^2))
hist(y*z)
s = runif(1000)
if(s < 0.5){
s = s
} else {
s = -1*s
}
x = rexp(1000)
y = rcauchy(1000)
z = sqrt((2*x)/(1+y^2))
hist(y*z, main = "Histogram of a random variable from normal distribution")
options(scipen = 1, digits = 4, width = 80)
library(knitr)
opts_chunk$set(echo=FALSE,
cache=TRUE, autodep=TRUE, cache.comments=FALSE,
message=FALSE, warning=FALSE)
randga = function(a){
d = a -1/3
c = 1/sqrt(3*d)
while(TRUE){
x = rnorm(1000)
v = 1 + x*c
while(v <= 0){
x = rnorm(1000)
v = 1 + c*x
}
v = v^3
u = runif(1000)
if(u < 1 - 0.0331 * (x^4)){
return(d*v)
}
if(log(u) < 0.5* (x^2) + d * (1-v+log(v))){
return (d*v)
}
}
}
hist(randga(2))
randga = function(a){
d = a -1/3
c = 1/sqrt(3*d)
while(TRUE){
x = rnorm(1000)
v = 1 + x*c
while(v <= 0){
x = rnorm(1000)
v = 1 + c*x
}
v = v^3
u = runif(1000)
if(u < 1 - 0.0331 * (x^4)){
return(d*v)
}
if(log(u) < 0.5* (x^2) + d * (1-v+log(v))){
return (d*v)
}
}
}
hist(randga(0.5))
randga = function(a){
d = a -1/3
c = 1/sqrt(3*d)
while(TRUE){
x = rnorm(1000)
v = 1 + x*c
while(v <= 0){
x = rnorm(1000)
v = 1 + c*x
}
v = v^3
u = runif(1000)
if(u < 1 - 0.0331 * (x^4)){
return(d*v)
}
if(log(u) < 0.5* (x^2) + d * (1-v+log(v))){
return (d*v)
}
}
}
hist(randga(0.8))
randga = function(a){
d = a -1/3
c = 1/sqrt(3*d)
while(TRUE){
x = rnorm(1000)
v = 1 + x*c
while(v <= 0){
x = rnorm(1000)
v = 1 + c*x
}
v = v^3
u = runif(1000)
if(u < 1 - 0.0331 * (x^4)){
return(d*v)
}
if(log(u) < 0.5* (x^2) + d * (1-v+log(v))){
return (d*v)
}
}
}
hist(randga(1))
randga = function(a){
d = a -1/3
c = 1/sqrt(3*d)
while(TRUE){
x = rnorm(1000)
v = 1 + x*c
while(v <= 0){
x = rnorm(1000)
v = 1 + c*x
}
v = v^3
u = runif(1000)
if(u < 1 - 0.0331 * (x^4)){
return(d*v)
}
if(log(u) < 0.5* (x^2) + d * (1-v+log(v))){
return (d*v)
}
}
}
hist(randga(2))
randga = function(a, b){
if(a>1){
d = a -1/3
c = 1/sqrt(9*d)
flag = TRUE
while(flag){
z = rnorm(1000)
if (z > -1/c){
v = (1+c*x)^3
u = runif(1000)
flag = log(u) > (0.5*z^2+d-d*v+d*log(v))
}
}
x = d*v/b
else{
randga = function(a, b){
if(a>1){
d = a -1/3
c = 1/sqrt(9*d)
flag = TRUE
while(flag){
z = rnorm(1000)
if (z > -1/c){
v = (1+c*x)^3
u = runif(1000)
flag = log(u) > (0.5*z^2+d-d*v+d*log(v))
}
}
x = d*v/b
else{
randga = function(a, b){
if(a>1){
d = a -1/3
c = 1/sqrt(9*d)
flag = TRUE
while(flag){
z = rnorm(1000)
if (z > -1/c){
v = (1+c*x)^3
u = runif(1000)
flag = log(u) > (0.5*z^2+d-d*v+d*log(v))
}
}
x = d*v/b
else{
randga = function(a, b){
if(a>1){
d = a -1/3
c = 1/sqrt(9*d)
flag = TRUE
while(flag){
z = rnorm(1000)
if (z > -1/c){
v = (1+c*x)^3
u = runif(1000)
flag = log(u) > (0.5*z^2+d-d*v+d*log(v))
x = d*v/b
}
} else {
randga = function(a, b){
if(a>1){
d = a -1/3
c = 1/sqrt(9*d)
flag = TRUE
while(flag){
z = rnorm(1000)
if (z > -1/c){
v = (1+c*x)^3
u = runif(1000)
flag = log(u) > (0.5*z^2+d-d*v+d*log(v))
}
}
x = d*v/b
} else {
x = randga(a+1, b)
x = x* runif(1000)^(1/a)
}
return (x)
}
hist(randga(2))
randga = function(a, b){
if(a>1){
d = a -1/3
c = 1/sqrt(9*d)
flag = TRUE
while(flag){
z = rnorm(1000)
if (z > -1/c){
v = (1+c*x)^3
u = runif(1000)
flag = log(u) > (0.5*z^2+d-d*v+d*log(v))
}
}
x = d*v/b
} else {
x = randga(a+1, b)
x = x* runif(1000)^(1/a)
}
return (x)
}
hist(randga(2, 2))
randga = function(a, b){
if(a>1){
d = a -1/3
c = 1/sqrt(9*d)
flag = TRUE
while(flag){
z = rnorm(1000)
if (z > -1/c){
v = (1+c*x)^3
u = runif(1000)
flag = log(u) > (0.5*z^2+d-d*v+d*log(v))
}
}
x = d*v/b
} else {
x = randga(a+1, b)
x = x* runif(1000)^(1/a)
}
return (x)
}
hist(randga(2, 1))
randga = function(a, b){
if(a>1){
d = a -1/3
c = 1/sqrt(9*d)
flag = TRUE
while(flag){
z = rnorm(1000)
if (z > -1/c){
v = (1+c*x)^3
u = runif(1000)
flag = log(u) > (0.5*z^2+d-d*v+d*log(v))
}
}
x = d*v/b
} else {
x = randga(a+1, b)
x = x* runif(1000)^(1/a)
}
return (x)
}
hist(randga(1, 2))
randga = function(a, b){
if(a>1){
d = a -1/3
c = 1/sqrt(9*d)
flag = TRUE
while(flag){
z = rnorm(1000)
if (z > -1/c){
v = (1+c*x)^3
u = runif(1000)
flag = log(u) > (0.5*z^2+d-d*v+d*log(v))
}
}
x = d*v/b
} else {
x = randga(a+1, b)
x = x* runif(1000)^(1/a)
}
return (x)
}
hist(randga(10, 2))
randga = function(a, b){
if(a>1){
d = a -1/3
c = 1/sqrt(9*d)
flag = TRUE
while(flag){
z = rnorm(1000)
if (z > -1/c){
v = (1+c*x)^3
u = runif(1000)
flag = log(u) > (0.5*z^2+d-d*v+d*log(v))
}
}
x = d*v/b
} else {
x = randga(a+1, b)
x = x* runif(1000)^(1/a)
}
return (x)
}
hist(randga(0.5, 1))
s = runif(1000)
if(s < 0.5){
s = s
} else {
s = -1*s
}
x = rexp(1000)
y = rcauchy(1000)
z = sqrt((2*x)/(1+y^2))
hist(s*z, y*z, main = "Histogram of a random variable from normal distribution")
s = runif(1000)
if(s < 0.5){
s = s
} else {
s = -1*s
}
x = rexp(1000)
y = rcauchy(1000)
z = sqrt((2*x)/(1+y^2))
hist(s*z, main  "Histogram of a random variable from normal distribution")
s = runif(1000)
if(s < 0.5){
s = s
} else {
s = -1*s
}
x = rexp(1000)
y = rcauchy(1000)
z = sqrt((2*x)/(1+y^2))
hist(s*z, main = "Histogram of a random variable from normal distribution")
hist(y*z, main = "Histogram of a random variable from normal distribution")
s = runif(1000)
if(s < 0.5){
s = 1
} else {
s = -1
}
x = rexp(1000)
y = rcauchy(1000)
z = sqrt((2*x)/(1+y^2))
hist(s*z, main = "Histogram of a random variable from normal distribution")
hist(y*z, main = "Histogram of a random variable from normal distribution")
options(scipen = 1, digits = 4, width = 80)
library(knitr)
opts_chunk$set(echo=FALSE,
cache=TRUE, autodep=TRUE, cache.comments=FALSE,
message=FALSE, warning=FALSE)
n <- 1000
nu <- 10
X <- matrix(rnorm(n * nu), n, nu)^2 #matrix of sq. normals
# sum the squared normals across each row: method 1
y <- rowSums(X)
hist(y, probability = TRUE)
# generate a Poisson-Gamma mixture
n <- 1000
r <- 4
beta <- 3
lambda <- rgamma(n, r, beta) #lambda is random
# now supply the sample of lambda's as the Poisson mean
x <- rpois(n, lambda) #the mixture
# compare with negative binomial
mix <- tabulate(x + 1)/n
negbin <- round(dnbinom(0:max(x), r, beta/(1 + beta)), 3)
se <- sqrt(negbin * (1 - negbin)/n)
round(rbind(mix, negbin, se), 3)
n <- 5000
k <- sample (1:5 , size =n , replace = TRUE , prob =(1:5) /15)
rate <- 1/k ; x <- rgamma (n , shape =3 , rate = rate )
# plot the density of the mixture with the densities of the components
plot ( density ( x ) , xlim =c(0 ,40) , ylim =c(0 ,.3) ,
lwd =3 , xlab ="x", main ="")
for ( i in 1:5){
lines ( density ( rgamma (n , 3 , 1/i )))
}
randga = function(a, b){
if(a>1){
d = a -1/3
c = 1/sqrt(9*d)
flag = TRUE
while(flag){
z = rnorm(1000)
if (z > -1/c){
v = (1+c*x)^3
u = runif(1000)
flag = log(u) > (0.5*z^2+d-d*v+d*log(v))
}
}
x = d*v/b
} else {
x = randga(a+1, b)
x = x* runif(1000)^(1/a)
}
return (x)
}
hist(randga(0.5, 1))
options(scipen = 1, digits = 4, width = 80)
library(knitr)
opts_chunk$set(echo=FALSE,
cache=TRUE, autodep=TRUE, cache.comments=FALSE,
message=FALSE, warning=FALSE)
randga = function(a, b){
if(a>1){
d = a -1/3
c = 1/sqrt(9*d)
flag = TRUE
while(flag){
z = rnorm(1000)
if (z > -1/c){
v = (1+c*x)^3
u = runif(1000)
flag = log(u) > (0.5*z^2+d-d*v+d*log(v))
}
}
x = d*v/b
} else {
x = randga(a+1, b)
x = x* runif(1000)^(1/a)
}
return (x)
}
hist(randga(0.5, 1))
