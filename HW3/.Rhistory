E2 = sd(estimates)
E2
x = seq(-3,3,by = 0.1)
y = (x^3) * (exp(x)-1)
plot(x, y, type = "l")
# The plot shows that samples from this function are not distributed fairly. We have more x between -3 and 2 and less x in (2,3).
f <- function(x) x^3*(exp(x)-1)
plot(f, from = -3, to = 3)
u <- runif(10000, -3, 3)
s0 <- mean(u^3*(exp(u)-1))
s0
set.seed(1)
x = runif(10000, -3, 3)
gx = (x^3) * (exp(x)-1)
s_0 = 6*mean(gx)
s_0
u <- runif(10000, -3, 3)
s0 <- 6*mean(u^3*(exp(u)-1))
s0
s_1 = numeric()
for(i in 1:6){
x = runif(n = round(10000/6), min = i - 4, max = i - 3)
gx = (x^3) * (exp(x)-1)
s_1[i] = mean(gx)
}
s_1 = sum(s_1)
s_1
m = 10000
k = 6
S1 = numeric()
g = function(x){
x^3*(exp(x)-1)
}
for(j in -3:3){
S1[j] = 1/k*mean(g(runif(m/k, j-1, j)))
}
S1 <- sum(S1)
S1
m = 10000
k = 6
S1 = numeric()
g = function(x){
x^3*(exp(x)-1)
}
for(j in -3:3){
S1[j] = mean(g(runif(m/k, j-1, j)))
}
S1 <- sum(S1)
S1
s_1 = numeric()
for(i in 1:6){
x = runif(n = round(10000/6), min = i - 4, max = i - 3)
gx = (x^3) * (exp(x)-1)
s_1[i] = mean(gx)
}
s_1 = sum(s_1)
s_1
m = 10000
k = 6
S1 = numeric()
g = function(x){
x^3*(exp(x)-1)
}
for(j in -3:3){
S1[j] = mean(g(runif(m/k, j-1, j)))
}
S1 <- sum(S1)
S1
for (i in 1:1000) {
x = runif(10000, -3, 3)
gx = (x^3) * (exp(x)-1)
s_0[i] = 6*mean(gx)
}
sd(s_0)
s1 = numeric()
for (i in 1:1000) {
for(j in 1:6){
x = runif(n = round(10000/6), min = j - 4, max = j - 3)
gx = (x^3) * (exp(x)-1)
s1[j] = mean(gx)
}
s_1[i] = sum(s1[j])
}
sd(s_1)
# The second method has smaller SE and is more efficient. We can increase the number of intervals in method 2 in order to improve efficiency.
n <- 1000
estimates <- matrix(0, n, 2)
m = 10000
k = 6
S1 = numeric(k)
g = function(x){
x^3*(exp(x)-1)
}
for(i in 1:n){
estimates[i, 1] = mean(g(runif(m, -3, 3)))
for(j in -3:3){
S1[j] = 1/k*mean(g(runif(m/k, j-1, j)))
}
estimates[i, 2] = sum(S1)
}
apply(estimates, 2, mean)
apply(estimates, 2, var)
n <- 1000
estimates <- matrix(0, n, 2)
m = 10000
k = 6
S1 = numeric(k)
g = function(x){
x^3*(exp(x)-1)
}
for(i in 1:n){
estimates[i, 1] = mean(g(runif(m, -3, 3)))
for(j in -3:3){
S1[j] = *mean(g(runif(m/k, j-1, j)))
n <- 1000
estimates <- matrix(0, n, 2)
m = 10000
k = 6
S1 = numeric(k)
g = function(x){
x^3*(exp(x)-1)
}
for(i in 1:n){
estimates[i, 1] = mean(g(runif(m, -3, 3)))
for(j in -3:3){
S1[j] = mean(g(runif(m/k, j-1, j)))
}
estimates[i, 2] = sum(S1)
}
apply(estimates, 2, mean)
apply(estimates, 2, var)
n <- 1000
estimates <- matrix(0, n, 2)
m = 10000
k = 6
S1 = numeric(k)
g = function(x){
x^3*(exp(x)-1)
}
for(i in 1:n){
estimates[i, 1] = 6*mean(g(runif(m, -3, 3)))
for(j in -3:3){
S1[j] = mean(g(runif(m/k, j-1, j)))
}
estimates[i, 2] = sum(S1)
}
apply(estimates, 2, mean)
apply(estimates, 2, var)
x = seq(0.1, 2.5, by = 0.1)
u = runif(10000)
cdf = numeric()
se = numeric()
for (i in 1:length(x)) {
u = runif(10000, 0, x[i])
gx = exp(-u^2 / 2)
cdf[i] = x[i]*mean(gx)/sqrt(2*pi) + 0.5
se[i] = x[i]*sd(gx)/sqrt(2*pi)/sqrt(10000)
}
cbind(x, cdf, phi=pnorm(q = x),se)[20,4]^2 # variance for MC estimate of phi(2).
cbind(x, cdf, phi=pnorm(q = x),se)[20,2]+cbind(x, cdf, phi=pnorm(q = x),se)[20,4]*c(-1.96,1.96) # 95% CI for MC estimate of phi(2).
f <- function(x){
x^2 * (1-x)^2
}
beta <- function(x){
if(x <= 0) {return (0)}
if(x >= 1) {return (1)}
c <- 1/integrate(f, 0, 1)$val
u <- runif(2000, 0, x)
ret <- x*c*mean(f(u))
return (ret)
}
x <- seq(0.1, 0.9, 0.1)
cdf <- numeric()
for( i in 1:9) {
cdf[i] <- beta(x[i])
}
true_cdf <- pbeta(x, 3, 3)
data.frame(x, cdf, true_cdf, abs(true_cdf - cdf))
#similar result
B = 1/30
cdf = numeric()
x = seq(0.1, 0.9, by = 0.1)
for (i in 1:length(x)) {
u = runif(10000,0,x[i])
gx = ((u^2)*(1-u)^2)
cdf[i] = x[i]*mean(gx)/B
}
cbind(x, cdf, pbeta(q = x, 3, 3))
m = 1000
theta.hat = numeric()
se = numeric()
gf = function(x){
g = exp(-x^2/2)/(x^2/sqrt(2*pi))
f = (x>1)
g*f
}
##try f1
x = rexp(m, 1)
gfphi = gf(x)/exp(-x)
theta.hat[1] = mean(gfphi)
se[1] = sd(gfphi)/sqrt(m)
##try f2
#use inverse cdf to similarte the f2
u = runif(m)
x = (3*u)^(1/3)
gfphi = gf(x)/(x^2)
theta.hat[2] = mean(gfphi)
se[2] = sd(gfphi)/sqrt(m)
se
gx = function(x){
(x>1) * (x^2) * exp(-(x^2)/2) / sqrt(2*pi)
}
for (i in 1:1000) {
a = rexp(1)
if(a>=1){x[i]=a}
else {x[i]=0}
}
x = x[x!=0]
g_f = gx(x)*(1-pexp(1,1)) / exp(-x)
theta1 = mean(g_f)
se1 = sd(g_f)
for (i in 1:1000) {
a = rgamma(1,2,1)
if(a>=1){x[i]=a}
else {x[i]=0}
}
x = x[x!=0]
g_f = gx(x)*(1-pgamma(q = 1,2,1)) / (x*exp(-x))
theta2 = mean(g_f)
se2 = sd(g_f)
# I choose exponential distribution with lambda = 1 and gamma distribution with alpha = 2 and beta = 1. The exponential distribution has lower variance because it has closer shape as the target distribution.
gx = function(x){
(x>1) * (x^2) * exp(-(x^2)/2) / sqrt(2*pi)
}
for (i in 1:1000) {
a = rexp(1)
if(a>=1){x[i]=a}
else {x[i]=0}
}
x = x[x!=0]
g_f = gx(x)*(1-pexp(1,1)) / exp(-x)
theta1 = mean(g_f)
se1 = sd(g_f)
for (i in 1:1000) {
a = rgamma(1,2,1)
if(a>=1){x[i]=a}
else {x[i]=0}
}
x = x[x!=0]
g_f = gx(x)*(1-pgamma(q = 1,2,1)) / (x*exp(-x))
theta2 = mean(g_f)
se2 = sd(g_f)
# I choose exponential distribution with lambda = 1 and gamma distribution with alpha = 2 and beta = 1. The exponential distribution has lower variance because it has closer shape as the target distribution.
se1
se2
n <- 1000
gf <- function(x){
if(x < 0) {return (0)}
else if (x>1) {return (0)}
gf = exp(-1/(2*x^2)) / (sqrt(2*pi)*x^4)
return (gf)
}
iter <- 0
x <- numeric()
while(iter < n){
f1 <- rexp(1)
x[iter] <- gf(f1)
iter <- iter + 1
}
gfphi = x/exp(-x)
var(gfphi)/n
gx = function(x){
(x>1) * (x^2) * exp(-(x^2)/2) / sqrt(2*pi)
}
for (i in 1:1000) {
a = rexp(1)
if(a>=1){x[i]=a}
else {x[i]=0}
}
x = x[x!=0]
g_f = gx(x)*(1-pexp(1,1)) / exp(-x)
theta = mean(g_f)
theta
n <- 1000
gf <- function(x){
if(x < 0) {return (0)}
else if (x>1) {return (0)}
gf = exp(-1/(2*x^2)) / (sqrt(2*pi)*x^4)
return (gf)
}
iter <- 0
x <- numeric()
while(iter < n){
f1 <- rexp(1)
x[iter] <- gf(f1)
iter <- iter + 1
}
gfphi = x/exp(-x)
thetheta = mean(gfphi)
n <- 1000
gf <- function(x){
if(x < 0) {return (0)}
else if (x>1) {return (0)}
gf = exp(-1/(2*x^2)) / (sqrt(2*pi)*x^4)
return (gf)
}
iter <- 0
x <- numeric()
while(iter < n){
f1 <- rexp(1)
x[iter] <- gf(f1)
iter <- iter + 1
}
gfphi = x/exp(-x)
thetheta = mean(gfphi)
thetheta
x = seq(0.1, 2.5, by = 0.1)
u = runif(10000)
cdf = numeric()
se = numeric()
for (i in 1:length(x)) {
u = runif(10000, 0, x[i])
gx = exp(-u^2 / 2)
cdf[i] = x[i]*mean(gx)/sqrt(2*pi) + 0.5
se[i] = x[i]*sd(gx)/sqrt(2*pi)/sqrt(10000)
}
cbind(x, cdf,   phi=pnorm(q = x),se)[20,4]^2 # variance for MC estimate of phi(2).
cbind(x, cdf, phi=pnorm(q = x),se)[20,2]+cbind(x, cdf, phi=pnorm(q = x),se)[20,4]*c(-1.96,1.96) # 95% CI for MC estimate of phi(2).
x = seq(0.1, 2.5, by = 0.1)
u = runif(10000)
cdf = numeric()
se = numeric()
for (i in 1:length(x)) {
u = runif(10000, 0, x[i])
gx = exp(-u^2 / 2)
cdf[i] = x[i]*mean(gx)/sqrt(2*pi) + 0.5
se[i] = x[i]*sd(gx)/sqrt(2*pi)/sqrt(10000)
}
cbind(x, cdf,   phi=pnorm(q = x),se)
#cbind(x, cdf,   phi=pnorm(q = x),se)[20,4]^2 # variance for MC estimate of phi(2).
#cbind(x, cdf, phi=pnorm(q = x),se)[20,2]+cbind(x, cdf, phi=pnorm(q = x),se)[20,4]*c(-1.96,1.96) # 95% CI for MC estimate of phi(2).
x = seq(0.1, 2.5, by = 0.1)
u = runif(10000)
cdf = numeric()
se = numeric()
for (i in 1:length(x)) {
u = runif(10000, 0, x[i])
gx = exp(-u^2 / 2)
cdf[i] = x[i]*mean(gx)/sqrt(2*pi) + 0.5
se[i] = x[i]*sd(gx)/sqrt(2*pi)/sqrt(10000)
}
cbind(x, cdf,   phi=pnorm(q = x),se)
#cbind(x, cdf,   phi=pnorm(q = x),se)[20,4]^2 # variance for MC estimate of phi(2).
cbind(x, cdf, phi=pnorm(q = x),se)[20,2]+cbind(x, cdf, phi=pnorm(q = x),se)[20,4]*c(-1.96,1.96) # 95% CI for MC estimate of phi(2).
#refer to example 3.5
x = seq(0.1, 2.5, by = 0.1)
u = runif(10000)
cdf = numeric()
se = numeric()
for (i in 1:length(x)) {
u = runif(10000, 0, x[i])
gx = exp(-u^2 / 2)
cdf[i] = x[i]*mean(gx)/sqrt(2*pi) + 0.5
se[i] = x[i]*sd(gx)/sqrt(2*pi)/sqrt(10000)
}
cbind(x, cdf,   phi=pnorm(q = x),se)
cbind(x, cdf, phi=pnorm(q = x),se)[20,2]
cbind(x, cdf, phi=pnorm(q = x),se)[20,4]*c(-1.96,1.96)
#refer to example 3.5
x = seq(0.1, 2.5, by = 0.1)
u = runif(10000)
cdf = numeric()
se = numeric()
for (i in 1:length(x)) {
u = runif(10000, 0, x[i])
gx = exp(-u^2 / 2)
cdf[i] = x[i]*mean(gx)/sqrt(2*pi) + 0.5
se[i] = x[i]*sd(gx)/sqrt(2*pi)/sqrt(10000)
}
#cbind(x, cdf,   phi=pnorm(q = x),se)
cbind(x, cdf,   phi=pnorm(q = x),se)[20,4]^2 # variance for MC estimate of phi(2).
cbind(x, cdf, phi=pnorm(q = x),se)[20,2]*c(-1.96,1.96)
#refer to example 3.5
x = seq(0.1, 2.5, by = 0.1)
u = runif(10000)
cdf = numeric()
se = numeric()
for (i in 1:length(x)) {
u = runif(10000, 0, x[i])
gx = exp(-u^2 / 2)
cdf[i] = x[i]*mean(gx)/sqrt(2*pi) + 0.5
se[i] = x[i]*sd(gx)/sqrt(2*pi)/sqrt(10000)
}
#cbind(x, cdf,   phi=pnorm(q = x),se)
#cbind(x, cdf,   phi=pnorm(q = x),se)[20,4]^2 # variance for MC estimate of phi(2).
cbind(x, cdf, phi=pnorm(q = x),se)[20,2]*c(-1.96,1.96)
x = seq(0.1, 2.5, by = 0.1)
u = runif(10000)
cdf = numeric()
se = numeric()
for (i in 1:length(x)) {
u = runif(10000, 0, x[i])
gx = exp(-u^2 / 2)
cdf[i] = x[i]*mean(gx)/sqrt(2*pi) + 0.5
se[i] = x[i]*sd(gx)/sqrt(2*pi)/sqrt(10000)
}
#cbind(x, cdf,   phi=pnorm(q = x),se)
#cbind(x, cdf,   phi=pnorm(q = x),se)[20,4]^2 # variance for MC estimate of phi(2).
cbind(x, cdf, phi=pnorm(q = x),se)[20,2]+cbind(x, cdf, phi=pnorm(q = x),se)[20,4]*c(-1.96,1.96) # 95% CI for MC estimate of phi(2).
x = seq(0.1, 2.5, by = 0.1)
u = runif(10000)
cdf = numeric()
se = numeric()
for (i in 1:length(x)) {
u = runif(10000, 0, x[i])
gx = exp(-u^2 / 2)
cdf[i] = x[i]*mean(gx)/sqrt(2*pi) + 0.5
se[i] = x[i]*sd(gx)/sqrt(2*pi)/sqrt(10000)
}
#cbind(x, cdf,   phi=pnorm(q = x),se)
#cbind(x, cdf,   phi=pnorm(q = x),se)[20,4]^2 # variance for MC estimate of phi(2).
cbind(x, cdf, phi=pnorm(q = x),se)[20,2]+cbind(x, cdf, phi=pnorm(q = x),se)[20,4]*c(-1.96,1.96) # 95% CI for MC estimate of phi(2).
x = seq(0.1, 2.5, by = 0.1)
u = runif(10000)
cdf = numeric()
se = numeric()
for (i in 1:length(x)) {
u = runif(10000, 0, x[i])
gx = exp(-u^2 / 2)
cdf[i] = x[i]*mean(gx)/sqrt(2*pi) + 0.5
se[i] = x[i]*sd(gx)/sqrt(2*pi)/sqrt(10000)
}
cbind(x, cdf,   phi=pnorm(q = x),se)
#cbind(x, cdf,   phi=pnorm(q = x),se)[20,4]^2 # variance for MC estimate of phi(2).
cbind(x, cdf, phi=pnorm(q = x),se)[20,2]+cbind(x, cdf, phi=pnorm(q = x),se)[20,4]*c(-1.96,1.96) # 95% CI for MC estimate of phi(2).
#refer to example 3.5
x = seq(0.1, 2.5, by = 0.1)
u = runif(10000)
cdf = numeric()
se = numeric()
for (i in 1:length(x)) {
u = runif(10000, 0, x[i])
gx = exp(-u^2 / 2)
cdf[i] = x[i]*mean(gx)/sqrt(2*pi) + 0.5
se[i] = x[i]*sd(gx)/sqrt(2*pi)/sqrt(10000)
}
#cbind(x, cdf,   phi=pnorm(q = x),se)
cbind(x, cdf,   phi=pnorm(q = x),se)[20,4]^2 # variance for MC estimate of phi(2).
cbind(x, cdf, phi=pnorm(q = x),se)[20,2]+cbind(x, cdf, phi=pnorm(q = x),se)[20,4]*c(-1.96,1.96) # 95% CI for MC estimate of phi(2).
u = numeric()
k = numeric()
geo = function(n,p){
for (i in 1:n) {
u[i] = runif(1,0,1)
if (u[i] < p)
k[i] = 0
else
k[i] = ceiling(log(1-u[i])/log(1-p))-1
}
return(k)
}
u = numeric()
k = numeric()
geo = function(n,p){
for (i in 1:n) {
u[i] = runif(1,0,1)
if (u[i] < p)
k[i] = 0
else
k[i] = ceiling(log(1-u[i])/log(1-p))-1
}
return(k)
}
mean(geo(1000, 0.4))
mean(rgeom(1000,0.4))
u = numeric()
k = numeric()
geo = function(n,p){
for (i in 1:n) {
u[i] = runif(1)
if (u[i] < p)
k[i] = 0
else
k[i] = ceiling(log(1-u[i])/log(1-p))-1#inverse cdf
}
return(k)
}
mean(geo(1000, 0.4))
mean(rgeom(1000,0.4))
# Due Week 6, Saturday Feb 29 by 11:59 PM on Compass
options(scipen = 1, digits = 4, width = 80)
library(knitr)
opts_chunk$set(echo=FALSE,
cache=TRUE, autodep=TRUE, cache.comments=FALSE,
message=FALSE, warning=FALSE)
n <- 1000
gf <- function(x){
if(x < 0) {return (0)}
else if (x>1) {return (0)}
gf = exp(-1/(2*x^2)) / (sqrt(2*pi)*x^4)
return (gf)
}
iter <- 0
x <- numeric()
while(iter < n){
f1 <- rexp(1)
x[iter] <- gf(f1)
iter <- iter + 1
}
gfphi = x/exp(-x)
thetheta = mean(gfphi)
thetheta
