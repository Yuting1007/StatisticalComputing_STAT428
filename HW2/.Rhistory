# }
#
# method1 <- algorithm(10000)
# method1$accept
algorithm <- function(n){
M <- 0.0346
accept <- 0; num <- 0
z <- rep(0, times = n)
while(accept < n){
x <- runif(1)
f <- (x^2) * (1 - x)^3
u <- runif(1)
g <- 1
if (u <= f/M/g){
accept <- accept + 1
z[accept] <- x
}
num <- num + 1
}
list(z = z, accept = n/num)
}
method1 <- algorithm(10000)
method1$accept
# nsim = 10000
# k = 0 #counter for accepted samples
# j = 0 #No of iterations required to get desired sample size
# y = numeric(nsim)    #Storing the sample
# M = 0.0246
#
# while(k < nsim){
#   u = runif(1)
#   j = j + 1
#   x = mean(runif(2))
#   g = 2- abs(4*x-2)#random variate from reference distribution g(x)
#   if((g^2)*(1-g)^3 > M*u){
#     #Condition of accepting x in our sample
#     k = k + 1
#     y[k] = g
#   }
# }
#
# hist(y, prob = TRUE)
algorithm <- function(n){
M <- 0.0246
accept <- 0; num <- 0
z <- rep(0, times = n)
while(accept < n){
x <- mean(runif(2))
f <- (x^2) * (1 - x)^3
u <- runif(1)
g <- 2 - abs(4 * x - 2)
if (u <= f/M/g){
accept <- accept + 1
z[accept] <- x
}
num <- num + 1
}
list(z = z, accept = n/num)
}
method2 <- algorithm(10000)
method2$accept
hist(method1$z, freq = FALSE, breaks = 30, main = "First Algorithm Result", xlab = "Accepted Samples")
hist(method2$z, freq = FALSE, breaks = 30, main = "Second Algorithm Result", xlab = "Accepted Samples")
apply(matrix.list, 1, FUN = function(x) findTrace(x))
matrix.list <- lapply(1:25, FUN=function(x) {matrix(1:x^2, nrow=x, ncol=x)})
#The given list of matrices
apply(matrix.list, 1, FUN = function(x) findTrace(x))
apply(matrix.list, 2, FUN = function(x) findTrace(x))
m1 <- matrix(1:9, nrow = 3)
m1 <- matrix(1:9, nrow = 3)
findTrace(m1)
findTrace <- function(x){
n <- dim(x)[1] # get the dimension of the matrix
m <- dim(x)[2]
# check for squared
if(n == m){
tr <- 0 # intialize the trace value
#loop over, add the diagonal elements of the squared matrix to the tr
for(k in 1: n){
ele <- A[k, k]
tr <- ele + tr
}
return(tr[[1]])
}
else {
message('Matrix is not square')
}
}
m1 <- matrix(1:9, nrow = 3)
findTrace(m1)
findTrace <- function(x){
n <- dim(x)[1] # get the dimension of the matrix
m <- dim(x)[2]
# check for squared
if(n == m){
tr <- 0 # intialize the trace value
#loop over, add the diagonal elements of the squared matrix to the tr
for(k in 1: n){
ele <- x[k, k]
tr <- ele + tr
}
return(tr[[1]])
}
else {
message('Matrix is not square')
}
}
m1 <- matrix(1:9, nrow = 3)
findTrace(m1)
apply(matrix.list, 1, FUN = findTrace(x))
apply(matrix.list, 2, findTrace)
result <- apply(matrix.list, findTrace)
for(item : matrix.list){
for(item in matrix.list){
print(item)
}
for(item in matrix.list){
findTrace(item)
}
for(item in matrix.list){
findTrace(item)
}
for(item in matrix.list){
findTrace(item)
}
findTrace <- function(x){
n <- dim(x)[1] # get the dimension of the matrix
m <- dim(x)[2]
# check for squared
if(n == m){
tr <- 0 # intialize the trace value
#loop over, add the diagonal elements of the squared matrix to the tr
for(k in 1: n){
ele <- x[k, k]
tr <- ele + tr
}
return(tr[[1]])
}
else {
message('Matrix is not square')
}
}
for(item in matrix.list){
findTrace(item)
}
class(matrix.list)
matrix.list[1]
findTrace(matrix.list[1])
options(scipen = 1, digits = 4, width = 80)
library(knitr)
opts_chunk$set(echo=FALSE,
cache=TRUE, autodep=TRUE, cache.comments=FALSE,
message=FALSE, warning=FALSE)
#from expontenial distribution??
# A chi-squared distribution with 2 degrees of freedom is an exponential distribution with mean 2 and vice versa.
#use inverse CDF
set.seed(123)
u = 2
x2 = -2*log(u)
hist(x2, prob=TRUE, main = "Histogram of chi-square distribution with df = 2")
#from expontenial distribution??
# A chi-squared distribution with 2 degrees of freedom is an exponential distribution with mean 2 and vice versa.
#use inverse CDF
set.seed(123)
u = runif(10000)
x2 = -2*log(u)
hist(x2, prob=TRUE, main = "Histogram of chi-square distribution with df = 2")
#x > 0
fx = -1/2*exp(1)
p = ecdf(fx)
p
#x > 0
fx = -1/2*exp(1)
p = ecdf(fx)
plot(p)
u <- runif(1000)
f <- 2/sqrt(1-u)
hist(f, probability = T, breaks=200, xlim=c(2,8), ylim=c(0,1), main="Density histogram of the samples", xlab = "x")
prob <- c(0.1, 0.2, 0.2, 0.2, 0.3)
cdf <- c(0, cumsum(prob))
cdf
install.packages("extraDistr")
library(extraDistr)
u <- runif(1000)
f <- 2/sqrt(1-u)
hist(f, probability = T, breaks=200, xlim=c(2,8), ylim=c(0,1), main="Density histogram of the samples", xlab = "x")
#for comparsion
library(extraDistr)
x <- rpareto(1000, 2, 2)
hist(x)
u <- runif(1000)
f <- 2/sqrt(1-u)
hist(f, probability = T, breaks=200, xlim=c(2,8), ylim=c(0,1), main="Density histogram of the samples", xlab = "x")
# #for comparsion
# library(extraDistr)
# x <- rpareto(1000, 2, 2)
# hist(x)
u <- runif(1000)
f <- 2/sqrt(1-u)
hist(f, probability = T, breaks=200, xlim=c(2,8), ylim=c(0,1), main="Density histogram of the samples", xlab = "x")
# #for comparsion
library(extraDistr)
x <- rpareto(1000, 2, 2)
hist(x, 1000, freq = FALSE)
u <- runif(1000)
f <- 2/sqrt(1-u)
hist(f, probability = T, breaks=200, xlim=c(2,8), ylim=c(0,1), main="Density histogram of the samples", xlab = "x")
# #for comparsion
library(extraDistr)
x <- rpareto(1000, 2, 2)
hist(x, 100, freq = FALSE)
u <- runif(1000)
f <- 2/sqrt(1-u)
hist(f, probability = T, breaks=200, xlim=c(2,8), ylim=c(0,1), main="Density histogram of the samples", xlab = "x")
# #for comparsion
library(extraDistr)
x <- rpareto(1000, 2, 2)
hist(x, 10, freq = FALSE)
u <- runif(1000)
f <- 2/sqrt(1-u)
hist(f, probability = T, breaks=200, xlim=c(2,8), ylim=c(0,1), main="Density histogram of the samples", xlab = "x")
# #for comparsion
library(extraDistr)
x <- rpareto(1000, 2, 2)
hist(x, 100, freq = FALSE)
u <- runif(1000)
f <- 2/sqrt(1-u)
hist(f, probability = T, breaks=200, xlim=c(2,8), ylim=c(0,1), main="Density histogram of the samples", xlab = "x")
# #for comparsion
library(extraDistr)
x <- rpareto(1000, 2, 2)
plot(x)
u <- runif(1000)
f <- 2/sqrt(1-u)
hist(f, probability = T, breaks=200, xlim=c(2,8), ylim=c(0,1), main="Density histogram of the samples", xlab = "x")
# #for comparsion
library(extraDistr)
x <- rpareto(1000, 2, 2)
hist(ppareto(x, 2, 2))
u <- runif(1000)
f <- 2/sqrt(1-u)
hist(f, probability = T, breaks=200, xlim=c(2,8), ylim=c(0,1), main="Density histogram of the samples", xlab = "x")
# #for comparsion
library(extraDistr)
x <- rpareto(1000, 2, 2)
hist(x, 100, freq = FALSE)
u <- runif(1000)
f <- 2/sqrt(1-u)
hist(f, probability = T, breaks=200, xlim=c(2,8), ylim=c(0,1), main="Density histogram of the samples", xlab = "x")
# #for comparsion
library(extraDistr)
x <- rpareto(1000, 2, 2)
hist(x, breaks=200, xlim=c(2,8), ylim=c(0,1))
u <- runif(1000)
f <- 2/sqrt(1-u)
hist(f, probability = T, breaks=200, xlim=c(2,8), ylim=c(0,1), main="Density histogram of the samples", xlab = "x")
# #for comparsion
library(extraDistr)
x <- rpareto(1000, 2, 2)
hist(x)
u <- runif(1000)
f <- 2/sqrt(1-u)
hist(f, probability = T, breaks=200, xlim=c(2,8), ylim=c(0,1), main="Density histogram of the samples", xlab = "x")
# #for comparsion
library(extraDistr)
x <- rpareto(1000, 2, 2)
hist(x, probability = T)
u <- runif(1000)
f <- 2/sqrt(1-u)
hist(f, probability = T, breaks=200, xlim=c(2,8), ylim=c(0,1), main="Density histogram of the samples", xlab = "x")
# #for comparsion
library(extraDistr)
x <- rpareto(1000, 2, 2)
hist(x, probability = T, xlim=c(2,8), ylim=c(0,1)
u <- runif(1000)
f <- 2/sqrt(1-u)
hist(f, probability = T, breaks=200, xlim=c(2,8), ylim=c(0,1), main="Density histogram of the samples", xlab = "x")
# #for comparsion
library(extraDistr)
x <- rpareto(1000, 2, 2)
hist(x, probability = T, xlim=c(2,8), ylim=c(0,1))
u <- runif(1000)
f <- 2/sqrt(1-u)
hist(f, probability = T, breaks=200, xlim=c(2,8), ylim=c(0,1), main="Density histogram of the samples", xlab = "x")
# #for comparsion
library(extraDistr)
x <- rpareto(1000, 2, 2)
hist(x,xlim=c(2,8), ylim=c(0,1))
u <- runif(1000)
f <- 2/sqrt(1-u)
hist(f, probability = T, breaks=200, xlim=c(2,8), ylim=c(0,1), main="Density histogram of the samples", xlab = "x")
# #for comparsion
library(extraDistr)
x <- rpareto(1000, 2, 2)
hist(x, probability = T)
u <- runif(1000)
f <- 2/sqrt(1-u)
hist(f, probability = T, breaks=200, xlim=c(2,8), ylim=c(0,1), main="Density histogram of the samples", xlab = "x")
# #for comparsion
library(extraDistr)
x <- rpareto(1000, 2, 2)
hist(x, 100, probability = T)
u <- runif(1000)
f <- 2/sqrt(1-u)
hist(f, probability = T, breaks=100, xlim=c(2,8), ylim=c(0,1), main="Density histogram of the samples", xlab = "x")
# #for comparsion
library(extraDistr)
x <- rpareto(1000, 2, 2)
hist(x, 100, probability = T)
u <- runif(1000)
f <- 2/sqrt(1-u)
hist(f, probability = T, breaks=200, xlim=c(2,8), ylim=c(0,1), main="Density histogram of the samples", xlab = "x")
# #for comparsion
library(extraDistr)
x <- rpareto(1000, 2, 2)
hist(x, 100, probability = T)
u <- runif(1000)
f <- 2/sqrt(1-u)
hist(f, probability = T, breaks=200, xlim=c(2,8), ylim=c(0,1), main="Density histogram of the samples", xlab = "x")
# #for comparsion
# library(extraDistr)
# x <- rpareto(1000, 2, 2)
# hist(x, 100, probability = T)
u <- runif(1000)
f <- 2/sqrt(1-u)
hist(f, probability = T, breaks=200, xlim=c(2,8), ylim=c(0,1), main="Density histogram of the samples", xlab = "x")
# #for comparsion
library(extraDistr)
x <- rpareto(1000, 2, 2)
hist(x, 100, probability = T)
install.packages("actuar")
install.packages("actuar")
options(scipen = 1, digits = 4, width = 80)
library(knitr)
opts_chunk$set(echo=FALSE,
cache=TRUE, autodep=TRUE, cache.comments=FALSE,
message=FALSE, warning=FALSE)
# Λ~gamma(r, β)
#Y~exp(Λ)
r = 4
s = 2
set.seed(123)
U = runif()
# Λ~gamma(r, β)
#Y~exp(Λ)
r = 4
s = 2
set.seed(123)
u = runif(1000)
Y = s*(1/((1-u)^(1/r))-1)
hist(Y, prob= TRUE)
# simulation from normal distribution
# set.seed(123)
# Z1 = rnorm(10000)
# set.seed(124)
# Z2 = rnorm(10000)
#  using the transformation method 4 under "3.4: Transformation methods" in the book
u = runif(10000)
v = runif(10000)
z1 = sqrt(-2*log(u))*cos(2*pi*v)
z2 = sqrt(-2*log(v))*sin(2*pi*u)
X1 = z1^2 + z2^2
hist(X1, prob= TRUE, main= "Histogram of chi-square distribution with df = 2")
#compare
plot(rchisq(10000,df=2))
# simulation from normal distribution
# set.seed(123)
# Z1 = rnorm(10000)
# set.seed(124)
# Z2 = rnorm(10000)
#  using the transformation method 4 under "3.4: Transformation methods" in the book
u = runif(10000)
v = runif(10000)
z1 = sqrt(-2*log(u))*cos(2*pi*v)
z2 = sqrt(-2*log(v))*sin(2*pi*u)
X1 = z1^2 + z2^2
hist(X1, prob= TRUE, main= "Histogram of chi-square distribution with df = 2")
#compare
hist(rchisq(10000,df=2))
# simulation from normal distribution
# set.seed(123)
# Z1 = rnorm(10000)
# set.seed(124)
# Z2 = rnorm(10000)
#  using the transformation method 4 under "3.4: Transformation methods" in the book
u = runif(10000)
v = runif(10000)
z1 = sqrt(-2*log(u))*cos(2*pi*v)
z2 = sqrt(-2*log(v))*sin(2*pi*u)
X1 = z1^2 + z2^2
mean(X1)
hist(X1, prob= TRUE, main= "Histogram of chi-square distribution with df = 2")
#compare
hist(rchisq(10000,df=2))
mean(rchisq(10000,df=2))
#from expontenial distribution??
# A chi-squared distribution with 2 degrees of freedom is an exponential distribution with mean 2 and vice versa.
#use inverse CDF
set.seed(123)
u = runif(10000)
x2 = -2*log(u)
hist(x2, prob=TRUE, main = "Histogram of chi-square distribution with df = 2")
mean(x2)
#from gamma distribution
set.seed(123)
df = 2
x3 = rgamma(10000, df/2, 1/2)
hist(x3, prob=TRUE, main = "Histogram of chi-square distribution with df = 2")
mean(x3)
# x ∈ R??
set.seed(123)
u = runif(1000)
indicator = numeric()
for(i in 1:1000){
if(u[i] > 0.5) indicator[i] = 1
else indicator[i] = -1
}
x = -indicator * log(1-2*abs(u-0.5))
hist(x, probability = T, xlim=c(-5,5), ylim=c(0,0.5), breaks = 40, main="Density histogram of the samples", xlab = "x")
#Use one of the methods shown in this chapter to compare the
#generated sample to the target distribution???
# x ∈ R??
set.seed(123)
u = runif(1000)
indicator = numeric()
for(i in 1:1000){
if(u[i] > 0.5) indicator[i] = 1
else indicator[i] = -1
}
x = -indicator * log(1-2*abs(u-0.5))
mean(x)
hist(x, probability = T, xlim=c(-5,5), ylim=c(0,0.5), breaks = 40, main="Density histogram of the samples", xlab = "x")
#Use one of the methods shown in this chapter to compare the
#generated sample to the target distribution???
set.seed(123)
x <- c(0, 2, 3, 4)
prob <- c(0.1, 0.2, 0.2, 0.2, 0.3)
cdf <- c(0, cumsum(prob))
cdf
sample(x, size = 1000)
set.seed(123)
x <- c(0, 2, 3, 4)
prob <- c(0.1, 0.2, 0.2, 0.2, 0.3)
cdf <- c(0, cumsum(prob))
cdf
sample(x, size = 1000, replace = TRUE)
set.seed(123)
x <- c(0, 2, 3, 4)
prob <- c(0.1, 0.2, 0.2, 0.2, 0.3)
cdf <- c(0, cumsum(prob))
cdf
sam = sample(x, size = 1000, replace = TRUE)
table(sam)
set.seed(123)
x <- c(0, 1, 2, 3, 4)
prob <- c(0.1, 0.2, 0.2, 0.2, 0.3)
cdf <- c(0, cumsum(prob))
cdf
sam = sample(x, size = 1000, replace = TRUE)
table(sam)
set.seed(123)
x <- c(0, 1, 2, 3, 4)
prob <- c(0.1, 0.2, 0.2, 0.2, 0.3)
cdf <- c(0, cumsum(prob))
cdf
sam = sample(x, size = 1000, replace = TRUE)
table(sam)
Empirical_Prob = table(sam)/1000
data.frame(Empirical_Prob,prob)
install.packages("survey")
set.seed(123)
x <- c(0, 1, 2, 3, 4)
prob <- c(0.1, 0.2, 0.2, 0.2, 0.3)
cdf <- c(0, cumsum(prob))
cdf
#sam = sample(x, size = 1000, replace = TRUE)#not working here, I would like it to sample with the given prob
library(survey)
sam <- startsample(x, prob)
set.seed(123)
x <- c(0, 1, 2, 3, 4)
prob <- c(0.1, 0.2, 0.2, 0.2, 0.3)
cdf <- c(0, cumsum(prob))
cdf
#sam = sample(x, size = 1000, replace = TRUE)#not working here, I would like it to sample with the given prob
library(survey)
sam <- stratsample(x, prob)
set.seed(123)
x <- c(0, 1, 2, 3, 4)
prob <- c("0" = 0.1, "1" = 0.2, "2" = 0.2, "3" = 0.2, "4" = 0.3)
cdf <- c(0, cumsum(prob))
cdf
#sam = sample(x, size = 1000, replace = TRUE)#not working here, I would like it to sample with the given prob
library(survey)
sam <- stratsample(x, prob)
set.seed(123)
x <- as.character(c(0, 1, 2, 3, 4))
prob <- c("0" = 0.1, "1" = 0.2, "2" = 0.2, "3" = 0.2, "4" = 0.3)
cdf <- c(0, cumsum(prob))
cdf
#sam = sample(x, size = 1000, replace = TRUE)#not working here, I would like it to sample with the given prob
library(survey)
sam <- stratsample(x, prob)
options(scipen = 1, digits = 4, width = 80)
library(knitr)
opts_chunk$set(echo=FALSE,
cache=TRUE, autodep=TRUE, cache.comments=FALSE,
message=FALSE, warning=FALSE)
u1 = runif(5000, -1, 1)
u2 = runif(5000, -1, 1)
u3 = runif(5000, -1, 1)
data = ifelse(abs(u3) >= abs(u2) & abs(u3) >= abs(u1), u2, u3)
hist(data, freq = F, main="Density histogram of the samples", xlab = "x", breaks = seq(-1, 1, by = 0.05))
