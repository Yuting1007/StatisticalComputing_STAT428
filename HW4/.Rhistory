options(scipen = 1, digits = 4, width = 80)
library(knitr)
opts_chunk$set(echo=FALSE,
cache=TRUE, autodep=TRUE, cache.comments=FALSE,
message=FALSE, warning=FALSE)
n = 20
K = n/2 - 1
m = 1000
mse = matrix(0, n/2, 2)
trimmed.mse = function(n, m, k){
tmean = numeric(m)
for(i in 1:m){
x = sort(rt(m, 3, 4))
tmean[i] = mean(x[(k+1):(n-k)])
}
mse.est = mean(tmean^2)
se.mse = sqrt(mean((tmean - mean(tmean))^2))/sqrt(m)
return (c(mse.est, se.mse))
}
for(k in 1:k){
mse[k, 1:2] = trimmed.mse(n,m,k)
}
n = 20
K = n/2 - 1
m = 1000
mse = matrix(0, n/2, 2)
trimmed.mse = function(n, m, k){
tmean = numeric(m)
for(i in 1:m){
x = sort(rt(m, 3, 4))
tmean[i] = mean(x[(k+1):(n-k)])
}
mse.est = mean(tmean^2)
se.mse = sqrt(mean((tmean - mean(tmean))^2))/sqrt(m)
return (c(mse.est, se.mse))
}
for(k in 1:K){
mse[k, 1:2] = trimmed.mse(n,m,k)
}
n = 20
K = n/2 - 1
m = 1000
mse = matrix(0, n/2, 2)
trimmed.mse = function(n, m, k){
tmean = numeric(m)
for(i in 1:m){
x = sort(rt(m, 3, 4))
tmean[i] = mean(x[(k+1):(n-k)])
}
mse.est = mean(tmean^2)
se.mse = sqrt(mean((tmean - mean(tmean))^2))/sqrt(m)
return (c(mse.est, se.mse))
}
for(k in 1:K){
mse[k, 1:2] = trimmed.mse(n,m,k)
}
round(mse, 3)
mse
n = 20
K = n/2 - 1
m = 1000
mse = matrix(0, n/2, 2)
trimmed.mse = function(n, m, k){
tmean = numeric(m)
for(i in 1:m){
x = sort(rt(m, 3, 4))
tmean[i] = mean(x[(k+1):(n-k)])
}
mse.est = mean(tmean^2)
se.mse = sqrt(mean((tmean - mean(tmean))^2))/sqrt(m)
return (c(mse.est, se.mse))
}
for(k in 1:K){
mse[k, 1:2] = trimmed.mse(n,m,k)
}
round(mse, 3)
